<?xml version="1.0" encoding="UTF-8" standalone="no"?><?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/rss2full.xsl"?>
<?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?>
<rss xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0"><channel><title>Force.com Blog</title><link>http://blog.sforce.com/sforce/</link><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" href="http://feeds.feedburner.com/forceblogside" rel="self" type="application/rss+xml"/><description>
</description><language>en</language><lastBuildDate>Wed, 15 Jun 2011 05:00:00 PDT</lastBuildDate><generator>TypePad http://www.typepad.com/</generator><feedburner:info uri="forceblogside"/><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" href="http://pubsubhubbub.appspot.com/" rel="hub"/><item><title>Using HTML5 Offline With Force.com</title><link>http://feedproxy.google.com/~r/forceblogside/~3/8mToomf_m2U/using-html5-offline-with-forcecom.html</link><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Birk</dc:creator><pubDate>Wed, 15 Jun 2011 05:00:00 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef01538f304f85970b</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p>HTML5 is the kind of web technology which means different things to different people.  Some see it as the next front of interface standards for the web, providing everything from a shot in the arm for CSS to better enabling 3D, audio and video.</p>
<p>Things like CSS and canvas get a lot of press because they offer up pretty animations to point at, however two my favorite new features are enabling web applications for offline use - mainly using the SQLLite offline database and web application cache.  Offline databases are straightforward, it allows JavaScript to create tables, query records, update rows, etc.  Web application cache takes a bit more getting used to understand the real use case for using it.</p>
<p>At a blush, web application cache behaves like client side cache in that it willl store files on the local computer.  But to describe the feature like client side cache on steroids is a bit unfair, application cache allows you to declare a specific set of files which compromise a complete offline application.  Once so defined, the only network activity potentially required is accessing new data.  The speed tradeoff is considerable, but application cache usage is notoriously tricky - browsers have different requirements before they will use the cache and once you've got the cache enabled, there are many scenarios where seeing updates to your application can be a pain.  Visualforce, however, gives us the ability to ease some of that pain.</p>
<p>So what I've got is some example code using both of these.  They utilize a Custom Object offered to me by someone at a workshop and I've adopted it as my completely generic data example: a quark.  The pages in this code simply filter quarks based on spin and mass, and then use a canvas to chart the results.</p>
<p>The package also includes the same kind of example code from the previous blog post <a href="http://blog.sforce.com/sforce/2011/05/tale-of-two-visualforce-pages-actionfunction-and-javascript-remoting.html" target="_self">comparing two Visualforce pages</a> between ActionFunction and JavaScript Remoting.  The rest of the pages use JavaScript Remoting to deliver JSON right to jQuery.</p>
<p>If you would like to follow along with this code in your Developer Edition, the package link <a href="https://login.salesforce.com/packaging/installPackage.apexp?p0=04tC0000000tio3" target="_self">is here</a>.</p>
<p>For using the offline database, there's utility functions within a JavaScript library which automatically creates tables and allows quicker access for saving, loading and updating rows.  This code is still pretty nascent, but does allow you easily take the resulting JSON from the remote action call and store it offline.  For example:</p>
<p><a href="http://blog.sforce.com/.a/6a00d8341cded353ef01538f30352f970b-pi" style="display: inline;"><img alt="Screen shot 2011-06-14 at 1.22.25 PM" border="0" class="asset  asset-image at-xid-6a00d8341cded353ef01538f30352f970b image-full" src="http://blog.sforce.com/.a/6a00d8341cded353ef01538f30352f970b-800wi" title="Screen shot 2011-06-14 at 1.22.25 PM"></img></a></p>
<p>Will check to see if there existing records being worked on (a global var set in the JavaScript library) and that the application is still online (IS_ONLINE is a global var set by the HTML5 Visualforce template, by asynchronously checking for an online file) and then save the result data to the database.  The end product looks like this in Chrome's developer console:</p>
<p><a href="http://blog.sforce.com/.a/6a00d8341cded353ef01538f3037f4970b-pi" style="display: inline;"><img alt="Screen shot 2011-06-14 at 12.07.33 PM" border="0" class="asset  asset-image at-xid-6a00d8341cded353ef01538f3037f4970b image-full" src="http://blog.sforce.com/.a/6a00d8341cded353ef01538f3037f4970b-800wi" title="Screen shot 2011-06-14 at 12.07.33 PM"></img></a> <br> <br>With this data stored in the offline database, you can access it extremely quickly despite connectivity.  I have to note that none of this data in encrypted, and there have been volumes written already about the lack of security around the HTML5 offline model, so do your due dilligence about what kind of data you are storing and how.</p>
<p>Creating a proper web application cache requires a properly formatted manifest page delivered with the content-type "text/cache-manifest" that includes exactly the information you want the browser to store on the client.  To handle this, I've got two pages: HTML5Template and HTML5Cache.</p>
<p>HTML5Template normally just holds the reference to jQuery, the utility JavaScript and some baseline functionality to set everything up.  However, if the controller sees two incoming params: cache and page, it will change the HTML tag to reference the manifest:</p>
<p><a href="http://blog.sforce.com/.a/6a00d8341cded353ef015433035ce7970c-pi" style="display: inline;"><img alt="Screen shot 2011-06-14 at 1.31.41 PM" border="0" class="asset  asset-image at-xid-6a00d8341cded353ef015433035ce7970c image-full" src="http://blog.sforce.com/.a/6a00d8341cded353ef015433035ce7970c-800wi" title="Screen shot 2011-06-14 at 1.31.41 PM"></img></a></p>
<p>The manifest page, HTML5Cache, has all the global assets included, but then also explicitly creates a reference to the specific Visualforce page being used:</p>
<p><a href="http://blog.sforce.com/.a/6a00d8341cded353ef01538f303ef9970b-pi" style="display: inline;"><img alt="Screen shot 2011-06-14 at 1.32.40 PM" border="0" class="asset  asset-image at-xid-6a00d8341cded353ef01538f303ef9970b" src="http://blog.sforce.com/.a/6a00d8341cded353ef01538f303ef9970b-800wi" title="Screen shot 2011-06-14 at 1.32.40 PM"></img></a> <br>Some browsers will assume that last line, but others (and most specifically the iPad's flavor of Mobile Safari) insist on it being created.</p>
<p>So with those query params in place, and if your browser supports HTML5 application cache, the page should now be available even if the browser is completely offline.  To see that on the iPad more easily, try saving the link to the homepage after all the quarks are stored.</p>
<p>The absolutely most updated version of this example will reside on <a href="https://github.com/joshbirk/FDC-HTML5Example" target="_self">github</a>, but if you want an easy package to load into your org, once again that link is <a href="https://login.salesforce.com/packaging/installPackage.apexp?p0=04tC0000000tio3" target="_self">here</a> (remember if putting it on a sandbox, change "login" to "test").</p>
<p>Next up, we'll see about using code like this with a <a href="http://devcenter.heroku.com/articles/node-js" target="_self">Node.js instance on Heroku</a>.  And we'll be talking about this kind of stuff and a whole lot more at <a href="http://www.salesforce.com/dreamforce/DF11/" target="_self">Dreamforce</a>.</p></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/8mToomf_m2U" height="1" width="1"/>]]></content:encoded><description>HTML5 is the kind of web technology which means different things to different people. Some see it as the next front of interface standards for the web, providing everything from a shot in the arm for CSS to better enabling 3D, audio and video. Things like CSS and canvas get a lot of press because they offer up pretty animations to point at, however two my favorite new features are enabling web applications for offline...</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/using-html5-offline-with-forcecom.html</feedburner:origLink></item><item><title>Database.com Sneak Peek Webinar Recording Available</title><link>http://feedproxy.google.com/~r/forceblogside/~3/e8rVen0vaqY/databasecom-sneak-peek-webinar-recording-available.html</link><category>Announcements</category><category>Database</category><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Bobrowski</dc:creator><pubDate>Mon, 13 Jun 2011 07:35:38 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef014e891c281e970d</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p>For everyone that missed the live version or wants a review, the Database.com Sneak Peek webinar from June 3, 2011 is now available for you viewing pleasure. This webinar covers<strong>:</strong></p>
<ul>
<li><strong>Mobile application development</strong> using Database.com as a data service.</li>
<li><strong>Real-time collaboration</strong> using the integrated social data model and APIs.</li>
<li><strong>Performance, reliability &amp; scalability</strong>, already serving 10B transactions per quarter</li>
<li><strong>Identity &amp; access management controls</strong>, enabling secure sharing of data across organizational boundaries</li>
</ul>
<p><iframe frameborder="0" height="349" src="http://www.youtube.com/embed/ONrk5WQ-Es4" width="560"></iframe> </p>
<ul>
</ul></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/e8rVen0vaqY" height="1" width="1"/>]]></content:encoded><description>For everyone that missed the live version or wants a review, the Database.com Sneak Peek webinar from June 3, 2011 is now available for you viewing pleasure. This webinar covers: Mobile application development using Database.com as a data service. Real-time collaboration using the integrated social data model and APIs. Performance, reliability &amp;amp; scalability, already serving 10B transactions per quarter Identity &amp;amp; access management controls, enabling secure sharing of data across organizational boundaries</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/databasecom-sneak-peek-webinar-recording-available.html</feedburner:origLink></item><item><title>Using Chrome Extensions With Force.com</title><link>http://feedproxy.google.com/~r/forceblogside/~3/h0PORHV8bIc/using-chrome-extensions-with-forcecom.html</link><category>User Interface</category><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Birk</dc:creator><pubDate>Fri, 10 Jun 2011 05:00:00 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef01538f0f2ccc970b</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p>As a heavy Chrome user, I've been looking out recently for ways to automate tasks I do frequently and wanted to see how difficult it would be to create extensions to accomplish that. It's actually pretty easy as Chrome extensions are essentially JavaScript based applications which the browser manages in the background - so if you are comfortable with JavaScript in general, you're probably well on your way.</p>
<p>The first thing I did was add searching the <a href="https://chrome.google.com/webstore/detail/hbgaijlmajljcdknenopkmlnhachnoob" target="_self">Apex documention to the Omnibox</a> (otherwise known as the location bar).  Our documentation search engine uses XML to cache potential search results, and this extension works directly against those files to generate results, as opposed to using the site's normal search.  This mechanism works equally well for <a href="https://chrome.google.com/webstore/detail/jjgnpjaopceolkgomnfjlihjfbnhejec" target="_self">Visualforce</a> or <a href="https://chrome.google.com/webstore/detail/eedaimbgdgodbidehhmonanfplopcadh" target="_self">API</a> documentation.</p>
<p>Another option to do searching like this is <a href="https://chrome.google.com/webstore/detail/fbojlhaajmiemkhdobbpbbdkjijadfjp" target="_self">Cloud Developer's Search Engine</a>, which provides a Google search into all the main Force.com content sites.</p>
<p>If you need the more Swiss Army version of such convenience, check out <a href="http://twitter.com/#!/jeffdonthemic" target="_self">Jeff Douglas</a>' <a href="https://chrome.google.com/webstore/detail/bchgkjmjnmekbampjoenadmoekocpbhp" target="_self">Force.com Utility Belt</a>, which also allows you to search not only against the documentations, but the boards, blogs and more as well ... and even offers the latest blog post towards the bottom of the extension window.  Jeff also rolled his handy ID converter into this extension, so you only need the utility belt to get that done.</p>
<p>Speaking of ID's, you might check out <a href="http://twitter.com/gokubi" target="_self">gokubi's</a> recent <a href="https://chrome.google.com/webstore/detail/hfiffenhnefppjhloglpebefjlbhoeai" target="_self">ID Clipper</a> extension, which gives you the ability to cleanly grab the ID of the record you're viewing.  It's got the ability to flip between 15 and 18 lengthed ID's, and can grab them off Visualforce pages as well.</p>
<p>Another handy one is <a href="https://chrome.google.com/webstore/detail/ldjbglicecgnpkpdhpbogkednmmbebec" target="_self">Force.com LOGINS</a> (the caps are in the title, I'm not yelling at you) which helps manage login information for multiple Force.com accounts.</p>
<p>If you don't see functionality you want here, you might check out the <a href="http://code.google.com/chrome/extensions/index.html" target="_self">code.google.com</a> site for creating new ones.</p></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/h0PORHV8bIc" height="1" width="1"/>]]></content:encoded><description>As a heavy Chrome user, I've been looking out recently for ways to automate tasks I do frequently and wanted to see how difficult it would be to create extensions to accomplish that. It's actually pretty easy as Chrome extensions are essentially JavaScript based applications which the browser manages in the background - so if you are comfortable with JavaScript in general, you're probably well on your way. The first thing I did was add...</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/using-chrome-extensions-with-forcecom.html</feedburner:origLink></item><item><title>CSRF and apex:page</title><link>http://feedproxy.google.com/~r/forceblogside/~3/PeZ484rmLMY/csrf-and-apexpage.html</link><category>Best Practices</category><category>Security</category><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Maher</dc:creator><pubDate>Thu, 09 Jun 2011 15:13:16 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef015432e76b7e970c</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p><span style="color: #111111;">From my colleague Reid at <a href="http://blog.sforce.com/sforce/2011/05/application-initialization-patterns-from-forcecom-labs.html" target="_self">http://blog.sforce.com/sforce/2011/05/application-initialization-patterns-from-forcecom-labs.html</a></span></p>
<div><strong><em><span style="color: #111111;">"I've had a few people ask me about using the standard Visualforce "<span style="font-family: 'courier new', courier;">apex:page</span>" tag and <span style="font-family: 'courier new', courier;">action="doSomething" </span>attribute.  I've stayed away from this in these apps as the docs clearly state this particular action should not be used for initialization."</span></em></strong><br> <br><span style="color: #111111;">The chief reason for this is to help prevent a class of attacks called "Cross-Site Request Forgery" or CSRF's.  More information can be found at</span></div>
<div><span style="color: #111111;"><a href="http://wiki.developerforce.com/index.php/Secure_Coding_Cross_Site_Request_Forgery#Apex_and_Visualforce_Applications " target="_self">http://wiki.developerforce.com/index.php/Secure_Coding_Cross_Site_Request_Forgery#Apex_and_Visualforce_Applications</a></span></div>
<div><span style="color: #111111;"><br></span></div>
<div><span style="color: #111111;">For those of you familiar with CSRFs, you might consider that to be an overly broad prohibition.  "Of course I can write <span style="font-family: 'courier new', courier;">&lt;apex:page&gt;</span> actions that don't do anything interesting when CSRF'd", you might say.  And you'd be right!  If you've got a good idea what a CSRF is, and you're completely fine with the security implications of a CSRF-able page, please feel free to use <span style="font-family: 'courier new', courier;">&lt;apex:page&gt;</span> action attributes.  If you have no idea what a CSRF is, or you don't know if it's safe or not to leave your page CSRF-able, read on.</span><br> <br><span style="color: #111111;">So what's a CSRF?  Consider an online shopping website, which for this post we'll call "llamazon.biz", where you can buy high-quality Peruvian Llamas and have them drop-shipped anywhere on earth with the touch of a button.  <a href="http://www.llamazon.biz/buy-llama.html" target="_self">http://www.llamazon.biz/buy-llama.html</a> might have a form on it that looks like...</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;"> </span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">&lt;form id="quality-llamas" action="/buy.asp" method="POST"&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;input type="text" name="shipping_address"&gt;&lt;/input&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;input type="text" name="quantity"&gt;&lt;/input&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;select name="llama_type"&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;option value="city"&gt;City Llama&lt;/option&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;option value="country"&gt;Country Llama&lt;/option&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;option value="coolranch"&gt;Zesty Cool Ranch Llama&lt;/option&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;/select&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;input type="submit" value="Submit"&gt;Buy it!&lt;/input&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">&lt;/form&gt;</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;"> </span><span style="font-family: 'courier new', courier; color: #111111;"> </span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;"> </span><span style="color: #111111;">In regular use, the user is already logged in to llamazon.biz, so they just need to write in the shipping address, the number of llamas to buy, and pick which variety of Llama you want.  llamazon.biz helpfully keeps your credit card number on file in their database.</span></div>
<div><br><span style="color: #111111;">Now, the problem here is that form posts aren't subject to the browser's same-origin policy.  That means, if you're logged in to llamazon.biz and your browser has llamazon.biz cookies, but the above <span style="font-family: 'courier new', courier;">&lt;form/&gt;</span> is served up from <a href="http://www.evil-hacker.com/evil-llama.html" target="_self">http://www.evil-hacker.com/evil-llama.html</a>, then when the user clicks "submit", the browser will still submit the request to llamazon.biz and helpfully include the user's llamazon.biz cookies.  There's no way for the llamazon server to tell if the user submitted the request from the llamazon page or the evil-hacker page.</span><br> <br><span style="color: #111111;">But it gets worse!  With just a tiny amount of javascript, the user doesn't even have to click anything.  The evil-hacker.com page could look like...</span></div>
<div><span style="color: #111111;"> </span><span style="color: #111111; font-family: 'courier new', courier;"> </span></div>
<div><span style="color: #111111; font-family: 'courier new', courier;">&lt;form id="llamas-to-pgh" action="https://www.llamazon.biz/buy.asp" method="POST"&gt;</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">   &lt;input type="hidden" name="shipping_address" value="5000+Forbes+Ave.%2CPittsburgh%2C+PA%2+C15213"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;input type="hidden" name="quantity" value="100" /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;input type="hidden name="llama_type" value="3" /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;input type="hidden" value="Submit" /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">&lt;/form&gt;</span><br><span style="color: #111111;"><span style="font-family: 'courier new', courier;">&lt;script&gt;</span><span style="font-family: 'courier new', courier;">document.getElementById("llamas-to-pgh").submit();</span><span style="font-family: 'courier new', courier;">&lt;/script&gt;</span></span></div>
<div><span style="color: #111111;"><span style="font-family: 'courier new', courier;"> </span></span></div>
<div><span style="color: #111111;"><span style="font-family: 'courier new', courier;"> </span></span><span style="color: #111111;">And just by loading the evil-hacker.com page, the innocent user will have asked llamazon.biz to send 100 Zesty Cool Ranch Llamas to Pittsburgh.  As an aside, note that JavaScript isn't the only way to do this.  The same sort of cross-domain post is possible with Adobe Flash (see AS3's navigateToURL() method, which allows POSTs, and lots of other arbitrary HTTP headers to be added).  You should also note that the attacker who owns evil-hacker.com doesn't need to know anything about the innocent user.  They never know the  innocent user's cookies.  They never know the innocent user's home address, or credit card number.  And they never see the result of the form submission.  The attacker relies on the browser using the cookies on evil-hacker's behalf.</span></div>
<div><br><span style="color: #111111;">So how do we fix this?  Why is Pittsburgh not already overrun with Llamas?  There are a couple of ways, but the industry-standard best practice to this is something called a CSRF "token".  With the token approach, we require the form to include something that the attacker doesn't know, and can't guess.  In the <span style="font-family: 'courier new', courier;">&lt;form id="quality-llamas"&gt;</span>, that would be an extra <span style="font-family: 'courier new', courier;">&lt;input&gt;</span> tag that looks like...</span><br> <br><span style="font-family: 'courier new', courier; color: #111111;">&lt;input type="hidden" name="_CONFIRMATIONTOKEN" value="xxyyzz" /&gt;</span><br> <br><span style="color: #111111;">Where "xxyyzz" is usually something like a SHA-256 hash of the user's llamazon.biz cookie concatenated with some other stuff.  The computation happens on the server-side, and the browser doesn't have to do any math.  It just echoes the string back on form submission.  It's usually not the llamazon.biz cookie itself, but a hash of it, for a variety of reasons.  Consider what happens if the user's machine is shared by a family.  If mom logs out and dumps her cookies, the llamazon.biz page itself might still be in cache.  Then if snoopy little brother trawls through the cache, he can steal the cookie and buy llamas on mom's credit card, or view mom's purchase history, or any number of inappropriate things, since llamazon.biz will think little brother *is* mom.</span><br> <br><span style="color: #111111;">The token approach works because the attacker at evil-hacker never actually knows the value of the user's cookie.  They just rely on the browser using it on their behalf.  Because they don't know the cookie, they can't compute the value of the token.  Because they can't compute the token, they can't include it in their malicious <span style="font-family: 'courier new', courier;">&lt;form id="llamas-to-pgh"&gt;</span>.  Because the server re-computes the token when it receives the form and compares the re-computed token to the form-submitted token, that comparison will fail and no llamas get shipped to Pittsburgh.</span><br> <br><span style="color: #111111;">So that's a CSRF, and how to mitigate against it.  What does that mean to you as a VisualForce/Apex developer?</span><br> <br><span style="color: #111111;">Whenever you use <span style="font-family: 'courier new', courier;">&lt;apex:form&gt;</span>, the platform automatically creates a CSRF token for you, includes it the <span style="font-family: 'courier new', courier;">&lt;form&gt;</span> HTML element that's sent to the browser, and validates it when the form is submitted.  If the validation fails, we don't execute the form, or any action attribute you've assigned to it.  That's not the case when you use an action on <span style="font-family: 'courier new', courier;">&lt;apex:page&gt;</span> - there are no CSRF tokens auto-created there.</span><br><br><span style="color: #111111;">Here’s an example of how you might run into this pattern.  llamazon.biz is a loyal Salesforce.com customer, which they use for inventory control.  Specifically, llamas are recorded as standard Contact objects with one slight change; there’s a custom field named “<span style="font-family: 'courier new', courier;">llama_type__c</span>”.  It stores a picklist with valid strings “<span style="font-family: 'courier new', courier;">city</span>”, “<span style="font-family: 'courier new', courier;">country</span>”, and “<span style="font-family: 'courier new', courier;">coolranch</span>”.</span><br><br><span style="color: #111111;">Since llamazon only deals with the highest-quality llama, they employ a crack team of highly trained caretakers, each of whom personally looks after a dozen or so llamas.  In our example, the caretakers are Salesforce users.  Further, each llama Contact object has its “owner” field set to the caretaker.  The llamas also tend to form very close emotional bonds to one another, so whenever they move from one location to another (ah, the fast-paced life of a jet-setting llama), most of the time all of a caretaker’s charges will all move together.  This results in the caretakers doing lots of bulk mailing address update changes.</span><br><br><span style="color: #111111;">Hey, wouldn’t it be cool if there was a Force.com page that let the caretakers do a bulk update of mailing addresses of all their llamas?  That would be awesome!  Oh, but here we run into our unsafe code example.  The VF page looks like this:</span></div>
<div><span style="color: #111111;"><br></span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">&lt;apex:page controller="Llamas" action="{!update_llamas_mailing}"&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;h1&gt;you have {!LlamaCount} llama{!LlamaPlural}&lt;/h1&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;apex:dataTable value="{!llamas}" var="l"  border="1"&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.LastName}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.Llama_Type__c}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingStreet}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingCity}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingState}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingCountry}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;/apex:dataTable&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">&lt;/apex:page&gt;</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;"> </span></div>
<div><span style="color: #111111;">The custom Apex controller looks like this:</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;"> </span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">public with sharing class Llamas {</span><br><span style="font-family: 'courier new', courier; color: #111111;">   public final List&lt;Contact&gt; llamas {get; set; }</span><br><span style="font-family: 'courier new', courier; color: #111111;">   private final Integer llama_count {get; set;}</span><br><span style="font-family: 'courier new', courier; color: #111111;">   private final Map&lt;String, String&gt; p;</span><br><br><span style="font-family: 'courier new', courier; color: #111111;">   public Llamas() {</span><br><span style="font-family: 'courier new', courier; color: #111111;">      this.llamas = [select id, LastName, MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry, llama_type__c from Contact where Llama_Type__c != NULL];</span><br><span style="font-family: 'courier new', courier; color: #111111;">      this.llama_count = this.llamas.size();</span><br><span style="font-family: 'courier new', courier; color: #111111;">      this.p = ApexPages.currentPage().getParameters();</span><br><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br>  <br><span style="font-family: 'courier new', courier; color: #111111;">   public Integer getLlamaCount(){ return this.llamas.size(); }</span><br><br><span style="font-family: 'courier new', courier; color: #111111;">   public String getLlamaPlural(){</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">      return this.llamas.size() == 1 ? '' : 's';</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br><br><span style="font-family: 'courier new', courier; color: #111111;">   public void update_llamas_mailing() {</span><br><span style="font-family: 'courier new', courier; color: #111111;">      Map&lt;String, String&gt; p = this.p;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      for(Contact c : this.llamas){</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(p.get('MailingStreet') != null ){</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">            c.MailingStreet = p.get('MailingStreet'); }</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(p.get('MailingCity') != null ){</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">            c.MailingCity = p.get('MailingCity'); }</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(p.get('MailingState') != null ){</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">            c.MailingState = p.get('MailingState'); }</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(p.get('MailingPostalCode') != null ){</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">            c.MailingPostalCode = p.get('MailingPostalCode'); }</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(p.get('MailingCountry') != null ){</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">            c.MailingCountry = p.get('MailingCountry'); }</span><br><span style="font-family: 'courier new', courier; color: #111111;">      }</span><br><span style="font-family: 'courier new', courier; color: #111111;">      update this.llamas;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br>  <br><span style="font-family: 'courier new', courier; color: #111111;">   static testMethod void myTest(){</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">      Llamas test_llama = new Llamas();</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">      System.assert(test_llama.getLlamaCount() &gt;= 0);</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br><span style="font-family: 'courier new', courier; color: #111111;">}</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;"> </span></div>
<div><span style="color: #111111;">So what does all that do?  On page load, the constructor fires and the <span style="font-family: 'courier new', courier;">this.llama Map</span> is filled in with all of the caretaker’s llama Contacts.  Then, the <span style="font-family: 'courier new', courier;">update_llama_mailing()</span> method fires, it iterates through each of and it inspects the URL query parameters for any mailing address values.  If it finds any, it updates the llama Contact objects with the new mailing addresses.  For example, if the URL looked like...</span><br><br><span style="color: #111111;"><a href="https://llamazon.na9.force.com/apex/llamas?mailingcity=Pittsburgh&amp;mailingpostalcode=15213 " target="_self">https://llamazon.na9.force.com/apex/llamas?mailingcity=Pittsburgh&amp;mailingpostalcode=15213<br></a></span><br><span style="color: #111111;">then <span style="font-family: 'courier new', courier;">update_llama_mailing()</span> would set the <span style="font-family: 'courier new', courier;">MailingCity</span> to Pittsburgh and the <span style="font-family: 'courier new', courier;">MailingPostalCode</span> to 15213 for all of the caretaker’s llamas.  The caretaker would also get a nice little table listing all of his charges and their new mailing addresses.</span><br><br><span style="color: #111111;">And there’s the flaw!  There’s nothing that prevents an attacker from crafting an evil-hacker.com page that contains a bunch of image tags that look like...</span><br><br><span style="font-family: 'courier new', courier; color: #111111;">&lt;img src=”https://llamazon.na9.force.com/apex/llamas?mailingcity=Pittsburgh&amp;...”&gt;</span><br><br><span style="color: #111111;">And if the attacker can trick the caretaker from viewing evil-hacker.com (not even clicking anything, just loading the evil-hacker.com page), then the poor caretaker’s browser will happily send a cookie of to salesforce, and the llamas are off to spend a sultry summer in Pittsburgh.</span><br><br><span style="color: #111111;">The solution, as discussed above, is to move the action from <span style="font-family: 'courier new', courier;">&lt;apex:page&gt;</span> to <span style="font-family: 'courier new', courier;">&lt;apex:form&gt;</span>.  The new VisualForce page looks like...</span></div>
<div><span style="color: #111111; font-family: 'courier new', courier;"> </span></div>
<div><span style="color: #111111; font-family: 'courier new', courier;">&lt;apex:page controller="Llamas"&gt;</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">   &lt;h1&gt;you have {!LlamaCount} llama{!LlamaPlural}&lt;/h1&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;apex:dataTable value="{!llamas}" var="l"  border="1"&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.LastName}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.Llama_Type__c}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingStreet}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingCity}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingState}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingPostalCode}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:column value="{!l.MailingCountry}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;/apex:dataTable&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;apex:form &gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;apex:pageBlock title="Bulk Update Llama Mailing Address"&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">         &lt;apex:messages /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">         &lt;apex:pageBlockButtons &gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">            &lt;apex:commandButton value="Save" action="{!update_llamas_mailing}"/&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">         &lt;/apex:pageBlockButtons&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">         Street: &lt;apex:inputText value="{!fl.MailingStreet}" /&gt;&lt;p /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">         City: &lt;apex:inputText value="{!fl.MailingCity}" /&gt;&lt;p /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">         State: &lt;apex:inputText value="{!fl.MailingState}" /&gt;&lt;p /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">         Postal Code: &lt;apex:inputText value="{!fl.MailingPostalCode}" /&gt;&lt;p /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">         Country: &lt;apex:inputText value="{!fl.MailingCountry}" /&gt;&lt;p /&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">      &lt;/apex:pageBlock&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   &lt;/apex:form&gt;</span><br><span style="font-family: 'courier new', courier; color: #111111;">&lt;/apex:page&gt;</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;"> </span></div>
<div><span style="color: #111111;">with Apex code...</span></div>
<div><span style="color: #111111; font-family: 'courier new', courier;"> </span></div>
<div><span style="color: #111111; font-family: 'courier new', courier;">public with sharing class Llamas {</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;">   public final List&lt;Contact&gt; llamas {get; set; }</span><br><span style="font-family: 'courier new', courier; color: #111111;">   private final Integer llama_count {get; set;}</span><br><span style="font-family: 'courier new', courier; color: #111111;">   public Map&lt;String, String&gt; p {get; set; }</span><br><span style="font-family: 'courier new', courier; color: #111111;">   public Contact fl {get; set; }  // fake llama!</span><br><br><span style="font-family: 'courier new', courier; color: #111111;">   public Llamas() {</span><br><span style="font-family: 'courier new', courier; color: #111111;">      this.llamas = [select id, LastName, MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry, llama_type__c from Contact where Llama_Type__c != NULL];</span><br><span style="font-family: 'courier new', courier; color: #111111;">      this.llama_count = this.llamas.size();</span><br><span style="font-family: 'courier new', courier; color: #111111;">      this.p = ApexPages.currentPage().getParameters();</span><br><span style="font-family: 'courier new', courier; color: #111111;">      this.fl = new Contact();</span><br><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br>  <br><span style="font-family: 'courier new', courier; color: #111111;">   public Integer getLlamaCount(){</span><br><span style="font-family: 'courier new', courier; color: #111111;">      return this.llamas.size();</span><br><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br><br><span style="font-family: 'courier new', courier; color: #111111;">   public String getLlamaPlural(){</span><br><span style="font-family: 'courier new', courier; color: #111111;">      return this.llamas.size() == 1 ? '' : 's';</span><br><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br><br><span style="font-family: 'courier new', courier; color: #111111;">   public void update_llamas_mailing() {</span><br><span style="font-family: 'courier new', courier; color: #111111;">      Map&lt;String, String&gt; p = this.p;</span><br>    <br><span style="font-family: 'courier new', courier; color: #111111;">      for(Contact c : this.llamas){</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(fl.MailingStreet != null) { c.MailingStreet = fl.MailingStreet; }</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(fl.MailingCity != null) { c.MailingCity = fl.MailingCity; }</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(fl.MailingState != null) { c.MailingState = fl.MailingState; }</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(fl.MailingPostalCode != null) { c.MailingPostalCode = fl.MailingPostalCode; }</span><br><span style="font-family: 'courier new', courier; color: #111111;">         if(fl.MailingCountry != null) { c.MailingCountry = fl.MailingCountry; }</span><br><span style="font-family: 'courier new', courier; color: #111111;">      }</span><br><span style="font-family: 'courier new', courier; color: #111111;">      update this.llamas;</span><br><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br>  <br><span style="font-family: 'courier new', courier; color: #111111;">   static testMethod void myTest(){</span><br><span style="font-family: 'courier new', courier; color: #111111;">      Llamas test_llama = new Llamas();</span><br><span style="font-family: 'courier new', courier; color: #111111;">      System.assert(test_llama.getLlamaCount() &gt;= 0);</span><br><span style="font-family: 'courier new', courier; color: #111111;">   }</span><br><span style="font-family: 'courier new', courier; color: #111111;">}</span></div>
<div><span style="font-family: 'courier new', courier; color: #111111;"> </span></div>
<div><span style="color: #111111;">Here, rather than inspect the query parameters directly, we create a “fake” llama Contact object, and have the VF page prompt the caretaker to enter in the new mailing address in the page, not as query parameters.  Of course, under the covers, those mailing address fields become POST parameters and are saved into the “<span style="font-family: 'courier new', courier;">fl</span>” Contact object.  However, the platform is handling that for us via the <span style="font-family: 'courier new', courier;">&lt;apex:inputText&gt;</span> tag, and that “<span style="font-family: 'courier new', courier;">fl</span>” fake llama isn’t persisted into the database after the page is done loading.</span></div>
<div><br><span style="color: #111111;">Most importantly, if you view source on the page before submitting, you’ll see something like this..</span></div>
<div><br><span style="font-family: 'courier new', courier; color: #111111;">&lt;input type="hidden"  id="com.salesforce.visualforce.ViewStateCSRF" name="com.salesforce.visualforce.ViewStateCSRF" value="[big-ugly-long-base64-string]" /&gt;</span><br><br><span style="color: #111111;">That big-ugly-long-base64-string?  That’s the CSRF token, which the platform has also auto-provided us with, as discussed above.  If it’s absent (or incorrect) when the page is requested, the platform won’t call <span style="font-family: 'courier new', courier;">update_llamas_mailing()</span>, and we’re safe from CSRF.</span><br> <br><span style="color: #111111;">So why are we so capricious?  Why do we protect you on <span style="font-family: 'courier new', courier;">&lt;apex:form&gt;</span> but not <span style="font-family: 'courier new', courier;">&lt;apex:page&gt;</span>?  The problem is that if we required valid tokens for <span style="font-family: 'courier new', courier;">&lt;apex:page&gt;</span>, we'd break direct navigation.  Right now, I can take the link<a href=" https://llamazon-app.na1.force.com/00A0000abcdef" target="_self"> https://llamazon-app.na1.force.com/00A0000abcdef</a> that points to some object, and mail it or IM it to coworkers, and they can just click it and load it in their browser.  If the force.com platform were to require a valid token for all <span style="font-family: 'courier new', courier;">&lt;apex:page&gt;</span>'s, I'd have no way to do that sort of regular casual link sharing we all take for granted.</span><br> <br><span style="color: #111111;">Now, as I said above, you may (rightly) be thinking that there are a whole slew of <span style="font-family: 'courier new', courier;">&lt;apex:page&gt;</span> actions you could do that it doesn't matter if an attacker can trick a user into executing.  If your action just does a basic SOQL query for inclusion on the page, but doesn't actually create, update, or delete any objects in the database (or do ANYTHING ELSE), you're fine.  Remember, the attacker in a CSRF is blind - they never see the results of the request, so they can't eavesdrop on it, either.</span><br> <br><span style="color: #111111;">When you're trying to decide if something needs CSRF protection, the question you should always ask yourself is:</span><br> <br><span style="color: #111111;"><strong><span style="font-size: 12pt;">"If this results in something happening that makes an innocent user say 'But I didn't do that!', you need a CSRF token"</span></strong></span><br> <br><span style="color: #111111;">While creating, updating, and deleting database objects covers most of that ground, it doesn't cover everything.  If your action does any HTTP callouts (like say, a 3rd party API), and that results in something happening in the 3rd party's database, you need a CSRF token.  If your action code sends mail, you need a CSRF token.  If your object is sensitive, and you're under a regulatory requirement to have audit log records every time the object is viewed (not just edited), you should really, really have a CSRF token to help maintain the integrity of the audit log.</span></div></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/PeZ484rmLMY" height="1" width="1"/>]]></content:encoded><description>How not to CSRF yourself on Force.com.  Now with 20% more llamas.</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/csrf-and-apexpage.html</feedburner:origLink></item><item><title>Single Sign-On with Force.com and Microsoft Active Directory Federation Services</title><link>http://feedproxy.google.com/~r/forceblogside/~3/O0TNXyNUFuc/single-sign-on-with-forcecom-and-microsoft-active-directory-federation-services.html</link><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pat Patterson</dc:creator><pubDate>Thu, 09 Jun 2011 10:28:51 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef01538f12c590970b</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://blog.sforce.com/.a/6a00d8341cded353ef01538f12bd5e970b-pi" style="float: left;"><img alt="Rhys Goodwin" class="asset  asset-image at-xid-6a00d8341cded353ef01538f12bd5e970b" src="http://blog.sforce.com/.a/6a00d8341cded353ef01538f12bd5e970b-120wi" style="margin: 0px 5px 5px 0px;" title="Rhys Goodwin"></img></a> As <a href="http://blog.sforce.com/sforce/2011/05/just-in-time-user-provisioning-in-summer-11.html" target="_self">I've mentioned before</a> here at the Force.com blog, single sign-on (SSO) has become a must-have feature for cloud deployments - users love being able to access cloud-based resources without having to juggle another username/password combination, and IT operations love the control it gives them over users' access to those resources - when an employee leaves the company, marking them as inactive in the enterprise's identity store also puts associated cloud-based services out of reach.</p>
<p>In practice, the most common enterprise identity store is Microsoft's Active Directory. Since the release of Active Directory Federation Services (AD FS) version 2.0 about a year ago, it has been possible to configure SSO from an AD domain to Salesforce and customer apps running on Force.com. In researching an article on setting up SSO with AD FS, I came across <a href="http://blog.rhysgoodwin.com/" target="_self">Rhys Goodwin</a>'s <a href="http://blog.rhysgoodwin.com/cloud/salesforce-sso-with-adfs-2-0-everything-you-need-to-know/" target="_self">excellent blog entry on the topic</a>. With Rhys' kind permission, I extended and adapted the blog entry as a Developer Force article: <a href="http://wiki.developerforce.com/index.php/Single_Sign-On_with_Force.com_and_Microsoft_Active_Directory_Federation_Services" target="_self">Single Sign-On with Force.com and Microsoft Active Directory Federation Services</a>. If you're seeing co-workers furtively referring to password cheat-sheets as you walk around the office, you might want to take a look at it!</p></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/O0TNXyNUFuc" height="1" width="1"/>]]></content:encoded><description>As I've mentioned before here at the Force.com blog, single sign-on (SSO) has become a must-have feature for cloud deployments - users love being able to access cloud-based resources without having to juggle another username/password combination, and IT operations love the control it gives them over users' access to those resources - when an employee leaves the company, marking them as inactive in the enterprise's identity store also puts associated cloud-based services out of reach....</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/single-sign-on-with-forcecom-and-microsoft-active-directory-federation-services.html</feedburner:origLink></item><item><title>AppQuest '11: Be the next Cloud Idol</title><link>http://feedproxy.google.com/~r/forceblogside/~3/SOz05cjWpXE/appquest-11-be-the-next-cloud-idol.html</link><category>Announcements</category><category>App Distribution</category><category>Cloud Computing</category><category>Events</category><category>Integration</category><category>Partners</category><category>Tools</category><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Indrajit Sen</dc:creator><pubDate>Thu, 09 Jun 2011 08:59:00 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef01538f06f99f970b</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://blog.sforce.com/.a/6a00d8341cded353ef015432da2266970c-pi" style="display: inline;"><img alt="Banner2" border="0" class="asset  asset-image at-xid-6a00d8341cded353ef015432da2266970c" height="268" src="http://blog.sforce.com/.a/6a00d8341cded353ef015432da2266970c-800wi" style="display: block; margin-left: auto; margin-right: auto;" title="Banner2" width="320"></img></a></p>
<p> </p>
<p><span style="font-size: 10pt;">Got what it takes to be the next cloud superstar? Show us, by participating in <a href="http://developer.force.com/appquest11" target="_blank">AppQuest ’11 at Dreamforce</a>. Our <a href="http://www.salesforce.com/campaigns/appquest/" target="_blank">annual contest</a> to find the most promising apps in our cloud ecosystem is back, and ups  the ante with an exciting new format, and unparalleled opportunities  for exposure.</span></p>
<p><span style="font-size: 10pt;">It’s easy. All you need to do is build a cloud app using <a href="http://www.salesforce.com/platform/" target="_blank">Force.com</a>,  pitch your app and vision to us via YouTube and, if selected, show up  to Dreamforce for a star-making performance in front of an elite panel  of judges.</span></p>
<p><span style="font-size: 10pt;"> So go ahead, check out the <a href="http://developer.force.com/appquest11" target="_blank">contest details</a> and register <a href="http://www.developerforce.com/events/eventsappquest11/registration.php" target="_blank">here</a>.</span></p>
<ul>
<li><span style="font-size: 10pt;"><strong>Top 8 finalists</strong> get iPad2s</span></li>
<li><span style="font-size: 10pt;"><strong>Top 4 finalists</strong> get an all expense paid trip to Dreamforce ’11 and the opportunity to  present on stage (don’t worry, Simon Cowell won’t be there)</span></li>
<li><span style="font-size: 10pt;"><strong>The winner</strong> will receive, in addition to the above, a 1-year marketing package,  including sponsored ads on the AppExchange, home page banner ads,  customer emails, a press release, and more (valued at $90,000). </span></li>
</ul>
<p><span style="font-size: 10pt;">Ready? Set? Get started, <a href="http://developer.force.com/appquest11" target="_blank">here</a>.</span></p></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/SOz05cjWpXE" height="1" width="1"/>]]></content:encoded><description>Got what it takes to be the next cloud superstar? Show us, by participating in AppQuest ’11 at Dreamforce. Our annual contest to find the most promising apps in our cloud ecosystem is back, and ups the ante with an exciting new format, and unparalleled opportunities for exposure. It’s easy. All you need to do is build a cloud app using Force.com, pitch your app and vision to us via YouTube and, if selected, show...</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/appquest-11-be-the-next-cloud-idol.html</feedburner:origLink></item><item><title>Chicago Force.com Developers come out in Force!</title><link>http://feedproxy.google.com/~r/forceblogside/~3/T67_ILbEvsI/chicago-developer-meetup-gets-top-scores.html</link><category>Events</category><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kavindra Patel</dc:creator><pubDate>Wed, 08 Jun 2011 07:32:59 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef015432de72b5970c</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p>If you have not already heard, the <strong>June 7th Chicago Force.com Developer Meetup at DePaul University</strong> was a hit. We had close to <strong>80 developers</strong> from Chicago and surrounding cities and two of them even drove four hours from Iowa...WOW and WOW.<br><br>The Intro to Force.com with a hands-on lab track for beginners was delivered by our ISV Evangelist, Shoby Adbi and the advanced track was delivered by our App Evangelist, Reid Carlberg and Developer Evangelist, Joshua Birk. This track was a deeper dive into using the REST with Apex and Oauth for third party applications as well as building out HTML5 interfaces using JavaScript Remoting and Dynamic Visualforce components.<br><br>The evening was full of fun, food and learning and rewarding to the developer community. Due to the great interest, two of the developers also showed interest in becoming the Chicago Force.com Developer User Group leaders. We are looking forward to supporting them and the local developer community.</p>
<p>If you are interested in being a Force.com Developer User Group Leader, please email us at info@developerforce.com.</p>
<p>   <a href="http://blog.sforce.com/.a/6a00d8341cded353ef01538f0b44b3970b-pi" style="display: inline;"><img alt="IMG_1646" class="asset  asset-image at-xid-6a00d8341cded353ef01538f0b44b3970b" src="http://blog.sforce.com/.a/6a00d8341cded353ef01538f0b44b3970b-320wi" title="IMG_1646"></img></a> <br><br><br></p>
<p> </p></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/T67_ILbEvsI" height="1" width="1"/>]]></content:encoded><description>If you have not already heard, the June 7th Chicago Force.com Developer Meetup at DePaul University was a hit. We had close to 80 developers from Chicago and surrounding cities and two of them even drove four hours from Iowa...WOW and WOW. The Intro to Force.com with a hands-on lab track for beginners was delivered by our ISV Evangelist, Shoby Adbi and the advanced track was delivered by our App Evangelist, Reid Carlberg and Developer...</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/chicago-developer-meetup-gets-top-scores.html</feedburner:origLink></item><item><title>Integrating LinkedIn with Force.com</title><link>http://feedproxy.google.com/~r/forceblogside/~3/DA6CXxAVJbQ/integrating-linkedin-with-forcecom.html</link><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sandeep Bhanot</dc:creator><pubDate>Wed, 08 Jun 2011 06:00:00 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef01538ee091c2970b</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://blog.sforce.com/.a/6a00d8341cded353ef014e88d41b59970d-pi" style="float: left;"> </a><a href="http://blog.sforce.com/.a/6a00d8341cded353ef01538ee0a5dd970b-pi" style="float: left;"> </a><a href="http://blog.sforce.com/.a/6a00d8341cded353ef014e88d41be7970d-pi" style="float: left;"><img alt="Picture1" class="asset  asset-image at-xid-6a00d8341cded353ef014e88d41be7970d" src="http://blog.sforce.com/.a/6a00d8341cded353ef014e88d41be7970d-400wi" style="width: 400px; margin: 0px 5px 5px 0px;" title="Picture1"></img></a> I recently received a very interesting resume for a position at Salesforce.com. What caught my attention was that instead of the traditional resume structure (summary/objective, employment history, languages/platforms etc.), the resume started with two pages of blurbs from the applicant's LinkedIn recommendations. That's as good an example as any of the importance of social networks in general and the power of the world's largest professional networking site - LinkedIn - in particular. Apparently the <a href="http://online.wsj.com/article/SB10001424052748704816604576333132239509622.html" target="_blank">market agrees</a>.</p>
<p>Wouldn't it be cool if you could harness the power of someones professional network from within Chatter? What if certain status updates in Chatter could automatically be broadcasted to the user's LinkedIn network (check out the attached screenshot for a simple example)? That's one example of integrating Force.com with another Cloud based application, and I recently hosted a webinar to discuss the unique characteristics and patterns of such Cloud to Cloud integrations. You can watch a recording of the webinar <a href="http://wiki.developerforce.com/index.php/Webinar:_Cloud_to_Cloud_Integrations_with_Force.com" target="_blank">here</a>. One of the integration patterns that I discussed during the webinar was Outbound integrations - i.e. when Force.com initiates the integration with an outbound callout to the external cloud application/platform. The Chatter--&gt;LinkedIn synchronization use case was one of the demos that I did to help illustrate that pattern and I've since posted the code <a href="https://github.com/sbhanot-sfdc/LinkedInForce" target="_blank">to GitHub</a>. You can jump to <a href="http://www.youtube.com/watch?v=sL2kbwhZzoM#t=12m53s" target="_self">this point</a> in the recording if you're only interested in the LinkedIn demo (go ahead, I won't take it personally!).</p>
<p>The Chatter--&gt;LinkedIn integration uses Apex HTTP callouts and I wanted to highlight and discuss some of the code here. (<strong>Note:</strong> I would recommend watching the recording first to get a better sense of the high-level integration architecture). The starting point of the integration is the 'SyncLinkedInChatterStatus' trigger on the User object. This trigger looks for the special '#linkedin' hashtag in each Chatter status update and if found, invokes the 'updateStatus' method of the 'UpdateLinkedInUserStatus' class. Why delegate the actual LinkedIn sync to another class (other than having a nice modular code structure)? Because any Apex callout from a trigger context has to be made asynchronously using the special @future annotation. Lets take a closer look at that code</p>
<pre class="brush: VisualForce">public with sharing class UpdateLinkedInUserStatus {
    
    @future(callout=true)
    public static void updateStatus(List userIds, List statusUpdates)
    {       
        for (Integer i = 0; i&lt; userIds.size(); i++)
        {
            LinkedIn l = new LinkedIn(userIds.get(i));
            LinkedIn.Share s = new LinkedIn.Share();
            s.comment = statusUpdates.get(i);
            s.visibility = 'anyone';
            try
            {
                if (Limits.getLimitCallouts() &gt; Limits.getCallouts())
                {
                    l.updateUserShare(s);
                }   
            }
            catch(Exception e){}
        }
    }

}
</pre>
<p>As you can see, the actual logic for invoking the LinkedIn APIs in encapsulated in the appropriately named 'LinkedIn' class. Lets now take a look at where the real action is - the 'LinkedIn' class.</p>
<pre class="brush: VisualForce">public with sharing virtual class LinkedIn
{
    public static final String LINKED_IN_API_URL = 'http://api.linkedin.com/v1';
    public static final String LINKED_OAUTH_SERVICE_NAME = 'LinkedIn';
    private String sfdcUserId;
    private OAuth oa;       
    
    
    public LinkedIn(String userId)
    {
        sfdcUserId = userId;
    }
    
    public String updateUserShare(Share s)
    {
        HttpRequest req = createRequest('/people/~/shares','POST', s.toXML());
        HttpResponse resp = executeLinkedInRequest(req);
        return getResponseBody(req, resp);
    }
    
    protected virtual HttpRequest createRequest(String path, String method, DOM.Document request)
    {        
        HttpRequest req = new HttpRequest();
        req.setEndpoint(LINKED_IN_API_URL  + path);
        req.setMethod(method == null ? 'GET' : method);
        req.setHeader('Content-Type', 'text/xml');
        req.setTimeout(60000);
        
        if (request != null)
            req.setBodyDocument(request); 
        
        if (oa == null)
        {
            oa = new OAuth();       
            if (!oa.setService(LINKED_OAUTH_SERVICE_NAME, sfdcUserId))
            {
                System.debug('Didnt work:'+oa.message);
                throw new AuthenticationException(oa.message);
            }
        }
        
        oa.sign(req); 
        return req;   
    }
    
    protected virtual HttpResponse executeLinkedInRequest(HttpRequest req)
    {
        HttpResponse res = new Http().send(req);
        
        if (req.getMethod() == 'POST' &amp;&amp; res.getStatusCode() != 201)
        {
            System.debug('OAuth header:'+res.getHeader('oauth_problem'));
            throw new TwitterApiException (res.getBody());
        }
        else if (req.getMethod() == 'GET' &amp;&amp; res.getStatusCode() != 200)
            throw new TwitterApiException (res.getBody());

        return res;
    }
    
    protected virtual String getResponseBody(HttpRequest req, HttpResponse resp )
    {
        return resp.getBody();
    }
    .....
}
</pre>
<p>Lets start with the 'updateUserShare' method that is invoked to update the user's LinkedIn status ('Share' is the LinkedIn terminology for when users share updates with their network, analogous to a Chatter user's status update). The method simply invokes the <a href="http://developer.linkedin.com/community/apis" target="_blank">LinkedIn REST API</a> by calling 3 separate methods in sequence - the 'createRequest' method to create an HTTP request, the 'executeLinkedInRequest' method to execute the HTTP request and finally the 'getResponseBody' method to parse the response from LinkedIn. The reason for breaking out an Apex HTTP callout into these 3 steps is two fold. One, it makes the code more modular and reusable (we can easily add support for additional LinkedIn API calls by reusing the same 3 methods and simply changing the combination of URL, HTTP method and request body). Also, it's a good strategy for testing Apex callouts. As explained during the webinar, testing Apex callouts requires special considerations and breaking your callout into 3 separate steps is one of those strategies. The 'LinkedIn' class uses a more advanced version of that basic testing design pattern that also requires the class/methods to be defined as Virtual/Protected. For a blast from the past, check out <a href="http://wiki.developerforce.com/index.php?title=Virtual_Callout_Testing" target="_blank">this post</a> from the esteemed <a href="http://twitter.com/dcarroll" target="_blank">DevAngel </a>that explains this particular pattern in more detail. As you'll see from that post, this pattern was first implemented by the equally esteemed <a href="http://twitter.com/superfell" target="_blank">Simon Fell</a> in the <a href="http://developer.force.com/codeshare/apex/projectpage?id=a06300000030w3aAAA" target="_blank">TwitterForce toolkit</a> and I simply reused (ok, ok - stole) the pattern for my LinkedIn integration. </p>
<p>You'll also notice the use of an 'OAuth' class to sign the request before sending it off to LinkedIn. As is true for most modern cloud applications, LinkedIn supports the <a href="http://oauth.net/" target="_blank">OAuth </a>authentication protocol and I used the excellent <a href="http://developer.force.com/codeshare/projectpage?id=a0630000008MQYMAA4  " target="_blank">OAuth 1.0 Apex client library</a> to implement the authentication. Note that there are a couple of preliminary, one-time setup steps before you can use that OAuth Apex client library. For the sake of brevity I didn't cover those steps in the webinar (or in this post) and so let me know if you need additional details on setting up the OAuth Apex client in Force.com.</p>
<p>The 'LinkedIn' class included in this sample currently only supports the LinkedIn Share API that allows a user to share updates with his/her professional network. It can however be easily enhanced to support additional LinkedIn API features (like the <a href="http://developer.linkedin.com/docs/DOC-1002" target="_blank">Profile API</a>, the <a href="http://developer.linkedin.com/docs/DOC-1004" target="_blank">Connections API</a> etc.). So if your LinkedIn use case requires a different integration scenario, feel free to use this sample as a starting point. Let me know if you have any questions or comments.</p>
<p>And yes, we did hire the applicant.</p></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/DA6CXxAVJbQ" height="1" width="1"/>]]></content:encoded><description>I recently received a very interesting resume for a position at Salesforce.com. What caught my attention was that instead of the traditional resume structure (summary/objective, employment history, languages/platforms etc.), the resume started with two pages of blurbs from the applicant's LinkedIn recommendations. That's as good an example as any of the importance of social networks in general and the power of the world's largest professional networking site - LinkedIn - in particular. Apparently the market...</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/integrating-linkedin-with-forcecom.html</feedburner:origLink></item><item><title>Cloud Talk: Michael Farrington finds AppExchange glory with zero start-up costs</title><link>http://feedproxy.google.com/~r/forceblogside/~3/ooVTfnGiDuE/cloud-talk-michael-farrington-finds-appexchange-glory-with-zero-start-up-costs.html</link><category>App Distribution</category><category>Best Practices</category><category>Cloud Computing</category><category>Forceful Thinking</category><category>Partners</category><category>Tools</category><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Indrajit Sen</dc:creator><pubDate>Tue, 07 Jun 2011 16:32:03 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef014e88e051e4970d</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: center;">   
<object data="http://www.youtube.com/v/OwUjRlN-sL0?version=3" height="306" type="application/x-shockwave-flash" width="500">
<param name="data" value="http://www.youtube.com/v/OwUjRlN-sL0?version=3"></param>
<param name="allowFullScreen" value="true"></param>
<param name="allowscriptaccess" value="always"></param>
<param name="src" value="http://www.youtube.com/v/OwUjRlN-sL0?version=3"></param>
<param name="allowfullscreen" value="true"></param>
</object>
 </p>
<p> </p>
<p><a href="http://www.qandor.com/" target="_blank">Qandor</a> publishes some of the <a href="http://www.appexchange.com/" target="_self">AppExchange</a>’s most popular tools for administrators. Its most recent offering—<a href="http://appexchange.salesforce.com/listingDetail?listingId=a0N30000003HSXEEA4" target="_self">Field Trip</a>—lets admins run reports showing the use of fields in any custom object, and had more than 500 installs within 3 months of its release. Although Qandor has experienced enormous popularity on the AppExchange, the company is managed and run by just one person—Michael Farrington.</p>
<p><strong>Why did you choose to build a business around Force.com?</strong></p>
<p>As an individual developer who wanted to create enterprise applications, I couldn’t have done it with traditional software. <a href="http://www.salesforce.com/platform/" target="_self">Force.com</a> gave me the building blocks to found my own company. There are things inherent in the platform—like distribution, security, scalability, and performance—that I couldn’t have provided by myself.</p>
<p><strong>What kind of investment did you need to start your company?</strong></p>
<p>My main objective in operating Qandor is to raise money for nonprofit organizations, so minimizing costs is especially important. Free developer environments and supporting tools and resources mean that I can get to a working prototype for no cost at all. Security review costs have recently been significantly reduced, which means that now my go-to-market costs are also very manageable.</p>
<p><strong>Was it difficult to get started?</strong></p>
<p>No. I can do it all with <a href="http://www.salesforce.com/platform/isvforce/" target="_self">ISVforce</a> and the <a href="www.appexchange.com" target="_self">AppExchange</a>. ISVforce is critical to managing my business and my company’s activity on the AppExchange. If a customer wants to test-drive one of my apps or see a demo, I can manage it all through ISVforce.</p>
<p>The AppExchange is a great distribution vehicle. The thing I like most about it is the “blowfish effect.” I’m a single developer running a business, but because of all the great tools salesforce.com provides to help me manage my business, it gives the impression that I’m a much larger company. Customers are continually amazed that Qandor is just one person.</p>
<p><strong>What’s the best thing about partnering with salesforce.com? </strong></p>
<p>The community. I posted my first app as a way to share code with all the cool people I had met at user group meetings, salesforce.com events, and on developer message boards. My favorite thing about being in the community is being able to say, “<em>Hey guys, look what I built—what do you think?</em>” I’m a big <a href="http://force.com/">Force.com</a> geek, and there’s nothing better than talking shop with other geeks.</p>
<p><strong>What’s next for Qandor?</strong></p>
<p>Last year was the first year that Qandor was able to make a four-digit contribution to our primary nonprofit partner, the Acumen Fund (<a href="http://www.acumenfund.org/">http://www.acumenfund.org</a>). I want to build on that momentum.  We’re looking to release exciting enhancements to our most popular apps, and we have a brand-new app in the works that we think admins will love. <a href="http://twitter.com/qandor" target="_self">Follow us on twitter</a> to be the first to know (<a href="http://twitter.com/qandor">http://twitter.com/qandor</a>).</p></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/ooVTfnGiDuE" height="1" width="1"/>]]></content:encoded><description>Qandor publishes some of the AppExchange’s most popular tools for administrators. Its most recent offering—Field Trip—lets admins run reports showing the use of fields in any custom object, and had more than 500 installs within 3 months of its release. Although Qandor has experienced enormous popularity on the AppExchange, the company is managed and run by just one person—Michael Farrington. Why did you choose to build a business around Force.com? As an individual developer who...</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/cloud-talk-michael-farrington-finds-appexchange-glory-with-zero-start-up-costs.html</feedburner:origLink></item><item><title>Dreamforce '11 Call for Projects (#opensource)</title><link>http://feedproxy.google.com/~r/forceblogside/~3/9lUL0tfyJtA/dreamforce-11-call-for-projects-opensource.html</link><category>Announcements</category><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reid Carlberg</dc:creator><pubDate>Mon, 06 Jun 2011 15:20:09 PDT</pubDate><guid isPermaLink="false">tag:typepad.com,2003:post-6a00d8341cded353ef01538eff93b4970b</guid><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://blog.sforce.com/.a/6a00d8341cded353ef014e88f2ac1d970d-pi" style="display: inline;"><img alt="OPENSOURCE-200x100" border="0" class="asset  asset-image at-xid-6a00d8341cded353ef014e88f2ac1d970d" src="http://blog.sforce.com/.a/6a00d8341cded353ef014e88f2ac1d970d-800wi" style="float: left;" title="OPENSOURCE-200x100"></img></a>Dreamforce 11 is rapidly approaching and our developer track is filling in nicely.  One of the things I'm very excited to work on is highlighting the growing Force.com open source community during the event.  If you haven't had a chance, you should check out <a href="http://developer.force.com/codeshare" target="_self">Code Share</a> on DeveloperForce and take a look at some of the latest entries--lots of great stuff happening.  </p>
<p>Are you working on an open source project?  Do you want to connect with other practitioners and the larger community while at Dreamforce?  If so, I definitely want to talk to you.  </p>
<p>Please drop at a note to labs at salesforce dot com with details about your project, who you're working with, and your vision for Dreamforce.  Please send me this info no later than Friday, June 17, 2011.</p>
<p>I look forward to hearing from you!</p></div><img src="http://feeds.feedburner.com/~r/forceblogside/~4/9lUL0tfyJtA" height="1" width="1"/>]]></content:encoded><description>Dreamforce 11 is rapidly approaching and our developer track is filling in nicely. One of the things I'm very excited to work on is highlighting the growing Force.com open source community during the event. If you haven't had a chance, you should check out Code Share on DeveloperForce and take a look at some of the latest entries--lots of great stuff happening. Are you working on an open source project? Do you want to connect...</description><feedburner:origLink>http://blog.sforce.com/sforce/2011/06/dreamforce-11-call-for-projects-opensource.html</feedburner:origLink></item></channel></rss>